# Copyright (c) 2017 Tencent Inc.
# All rights reserved.
#
# Author: Li Wenting <wentingli@tencent.com>
# Date:   October 27, 2017

"""

This module defines various toolchain functions for building
targets from sources and custom parameters.
The toolchain function is defined as follows:

    def toolchain_function_name(targets, sources, **kwargs):
        pass

    Return None on success, otherwise a non-zero value to
    indicate failure.

    Parameters:

        * targets: a list of files separated by comma
                   to be built by tool chain
        * sources: a list of files as separated by comma
                   inputs to tool chain
        * kwargs: name=value pairs as parameters for tool chain

"""

import os
import sys

import blade_util


def generate_resource_index(targets, sources, name, path):
    header, source = targets
    h, c = open(header, 'w'), open(source, 'w')
    full_name = blade_util.regular_variable_name(os.path.join(path, name))
    guard_name = 'BLADE_RESOURCE_%s_H_' % full_name.upper()
    index_name = 'RESOURCE_INDEX_%s' % full_name
    print >>h, '''// This file was automatically generated by blade
#ifndef {0}
#define {0}

#ifdef __cplusplus
extern "C" {{
#endif

#ifndef BLADE_RESOURCE_TYPE_DEFINED
#define BLADE_RESOURCE_TYPE_DEFINED
struct BladeResourceEntry {{
    const char* name;
    const char* data;
    unsigned int size;
}};
#endif
'''.format(guard_name)
    print >>c, '''// This file was automatically generated by blade
#include "{0}"

const struct BladeResourceEntry {1}[] = {{'''.format(header, index_name)

    for s in sources:
        entry_var = blade_util.regular_variable_name(s)
        entry_name = blade_util.relative_path(s, path)
        entry_size = os.path.getsize(s)
        print >>h, '// %s' % entry_name
        print >>h, 'extern const char RESOURCE_%s[%d];' % (entry_var, entry_size)
        print >>h, 'extern const unsigned RESOURCE_%s_len;\n' % entry_var
        print >>c, '    { "%s", RESOURCE_%s, %s },' % (entry_name, entry_var, entry_size)

    print >>c, '''}};
const unsigned {0}_len = {1};'''.format(index_name, len(sources))
    print >>h, '''// Resource index
extern const struct BladeResourceEntry {0}[];
extern const unsigned {0}_len;

#ifdef __cplusplus
}}  // extern "C"
#endif

#endif  // {1}'''.format(index_name, guard_name)
    h.close()
    c.close()


def generate_resource_index_entry(args):
    targets = args[0], args[1]
    sources = args[2:]
    name = os.environ['TARGET_NAME']
    path = os.environ['SOURCE_PATH']
    return generate_resource_index(targets, sources, name, path)


toolchains = {
    'resource_index' : generate_resource_index_entry,
}


if __name__ == '__main__':
    name = sys.argv[1]
    ret = toolchains[name](sys.argv[2:])
    if ret:
        sys.exit(ret)

